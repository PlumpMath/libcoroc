#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <sys/socket.h>

#include "libtsc.h"

char *server;
int port;
int proxy_task(int);
int rwtask(int, int);

int main(int argc, char **argv) {
  int cfd, fd;
  int rport;
  char remote[16];

  if (argc != 4) {
    fprintf(stderr, "usage: tcpproxy localport server remoteport\n");
    return -1;
  }

  server = argv[2];
  port = atoi(argv[3]);

  if ((fd = tsc_net_announce(true, 0, atoi(argv[1]))) < 0) {
    fprintf(stderr, "cannot announce on tcp port %d: %s\n", atoi(argv[1]),
            strerror(errno));
    return -1;
  }

  tsc_net_nonblock(fd);
  while ((cfd = tsc_net_accept(fd, remote, &rport)) >= 0) {
    fprintf(stderr, "connection from %s:%d\n", remote, rport);
    __CoroC_Spawn proxy_task(cfd);
  }

  return 0;
}

int proxy_task(int fd) {
  int remotefd;

  if ((remotefd = tsc_net_dial(true, server, port)) < 0) {
    close(fd);
    __CoroC_Quit -1;
  }

  fprintf(stderr, "connected to %s:%d\n", server, port);

  __CoroC_Spawn rwtask(fd, remotefd);
  __CoroC_Spawn rwtask(remotefd, fd);

  return 0;
}

int rwtask(int rfd, int wfd) {
  int  n;
  char buf[2048];

  while ((n = tsc_net_read(rfd, buf, sizeof buf)) > 0)
    tsc_net_write(wfd, buf, n);

  shutdown(wfd, SHUT_WR);
  close(rfd);

  return 0;
}
